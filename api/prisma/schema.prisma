// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// organization or company account
model Tenant {
  id        String       @id @default(uuid())
  name      String
  slug      String       @unique
  createdAt DateTime     @default(now())
  users     UserTenant[]
}

// individual user account
model User {
  id              String           @id @default(uuid())
  email           String           @unique
  emailVerified   Boolean          @default(false)
  passwordHash    String?
  name            String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  oauthAccounts   OAuthAccount[]
  refreshTokens   RefreshToken[]
  roleAssignments RoleAssignment[]
  tenants         UserTenant[]
  lastSeenAt      DateTime?
  EmailToken      EmailToken[]
}

// roles within a tenant or platform-wide
enum Role {
  PLATFORM_ADMIN
  TENANT_ADMIN
  TEAM_MEMBER
  CUSTOMER
}

// junction table for many-to-many relationship between User and Tenant with role
model UserTenant {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  role      Role
  createdAt DateTime @default(now())

  @@unique([userId, tenantId])
}

// role assignments for users, scoped to tenant or platform-wide
model RoleAssignment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role
  scope     String? // tenant id or 'platform'
  createdAt DateTime @default(now())
}

model OAuthAccount {
  id            String   @id @default(uuid())
  provider      String
  providerId    String
  providerEmail String?
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())

  @@unique([provider, providerId])
}

model RefreshToken {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  tokenHash    String    @unique
  revoked      Boolean   @default(false)
  replacedById String?
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  lastUsedAt   DateTime?
  ip           String?
  userAgent    String?
  deviceName   String?
  sessionId    String?

  @@index([userId, revoked])
}

model EmailToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tokenHash String   @unique
  type      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  event     String
  meta      Json?
  createdAt DateTime @default(now())
}
